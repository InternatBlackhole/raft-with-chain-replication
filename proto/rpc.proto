syntax = "proto3";

package rpc;
option go_package="/rpc";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

message Node {
    string address = 1;
    uint32 port = 2;
    optional string id = 3;
}

message Entry {
    string key = 1;
    string value = 2;
}

message InternalEntry {
    string key = 1;
    string value = 2;
    uint32 version = 3;
}

message EntryCommited {
    string key = 1;
    // The value is empty if the entry is deleted
    // The value is present for optimization when a node
    //string value = 2;
    uint32 version = 3;
}

message Neighbors {
    Node prev = 1;
    Node next = 2;
}

service ReplicationProvider {
    rpc PutInternal(InternalEntry) returns (google.protobuf.Empty);
    rpc Commit(EntryCommited) returns (google.protobuf.Empty);
    rpc StreamEntries(stream InternalEntry) returns (google.protobuf.Empty);
}

service ControllerEvents {
    // The parameter is the node that is the new next node of the current node
    rpc NextChanged(Node) returns (google.protobuf.Empty);
    // The parameter is the node that is the new prev node of the current node
    rpc PrevChanged(Node) returns (google.protobuf.Empty);
    // The parameter is the node that is the new leader
    rpc LeaderChanged(Node) returns (google.protobuf.Empty);
    //rpc ControllerAdded(Node) returns (google.protobuf.Empty);
    //rpc ControllerRemoved(Node) returns (google.protobuf.Empty);
}

service Controller {
    // GerLeader returns the leader address and port
    rpc GetLeader(google.protobuf.Empty) returns (Node);
    // GetHead returns the head address and port
    rpc GetHead(google.protobuf.Empty) returns (Node);
    // GetTail returns the tail address and port
    rpc GetTail(google.protobuf.Empty) returns (Node);
    // Gets the port of the current controller receiving heartbeat
    rpc GetHeartbeatEndpoint(google.protobuf.Empty) returns (google.protobuf.UInt32Value);
    // Register into the chain, triggers NextChanged and PrevChanged events
    rpc RegisterAsReplicator(Node) returns (Neighbors);
    // Register into the controller cluster with id, will only succeed on leader, return the index of the node in the cluster
    rpc RegisterAsController(Node) returns (google.protobuf.UInt64Value);
}

service PutProvider {
    rpc Put(Entry) returns (google.protobuf.Empty);
}

service ReadProvider {
    rpc Get(google.protobuf.StringValue) returns (Entry);
}